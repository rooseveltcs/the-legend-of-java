import java.io.*;

import java.awt.*;

import java.util.*;

import java.awt.event.*;

import java.awt.event.ActionEvent.*;

import java.awt.event.ActionListener.*;

import java.awt.event.KeyEvent.*;

import java.awt.event.KeyListener.*;

import java.awt.event.MouseEvent.*;

import java.awt.event.MouseListener.*;

import java.awt.event.MouseMotionListener.*;

import java.awt.Component.*;

import java.awt.Frame.*;

import javax.swing.*;

import java.lang.*;

import java.lang.Object.*;

import java.awt.Toolkit.*;

import java.awt.image.*;

import javax.imageio.ImageIO;





public class Story {

   int hcount = 1;

   Polygon player = new Polygon();

   Polygon poly = player;

   int doorcount = 0;

   JFrame frame1 = new JFrame();

   int historyAxis = 50;

   DrawingPanel hpanel = new DrawingPanel(700, 700);

   Graphics gh = hpanel.getGraphics();

   int yAxis = 50;

   int count = 0;

   Scanner intro = new Scanner(System.in);

   Scanner error = new Scanner(System.in);

   DrawingPanel panel = new DrawingPanel(600, 700);

   Graphics g = panel.getGraphics();

   JFrame frame = new JFrame();

   Scanner history = new Scanner(System.in);

   public void Introduction () throws FileNotFoundException {

      hpanel.setVisible(false);

      intro = new Scanner(new File("intro.txt"));

      history = new Scanner(new File("ShortHistory.txt"));

      Font introFont = new Font("Verdana", Font.BOLD, 18);

      g.setFont(introFont);

      Font defaultFont = new Font("Verdana", Font.BOLD, 12);      

      panel.setBackground(Color.BLACK);

      g.setColor(Color.WHITE);

      g.fillRect(0, 0, 25, 700);

      g.fillRect(575, 0, 25, 700);

      g.fillRect(0, 0, 600, 25);

      g.fillRect(0, 675, 600, 25);

      g.drawString("The Story Of Java", 200, 100);

      panel.sleep(3500);

      g.setColor(Color.BLACK);

      g.fillRect(25, 25, 550, 650);

      count++;

      panel.addKeyListener(new introkey());

      g.setColor(Color.WHITE);

      g.setFont(defaultFont);

      g.setFont(defaultFont);

      frame.setBackground(Color.BLACK);

      frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

      frame.setTitle("Are you ready?");

      JButton yesButton = new JButton();

      yesButton.setText("Yes");

      yesButton.setBackground(Color.WHITE);

      yesButton.addActionListener(new UserClickedYes());

      frame.add(yesButton);

      JButton noButton = new JButton();

      noButton.setText("No");

      noButton.setBackground(Color.WHITE);

      noButton.addActionListener(new UserClickedNo());

      frame.add(noButton);

      frame.setLayout(new FlowLayout());

      frame.pack();

      frame.setLocation(600, 100);

   }



   public class UserClickedYes implements ActionListener { 

      public void actionPerformed(ActionEvent event) {

         JOptionPane.showMessageDialog(null, "Very well. I must first tell you about \n the events leading up to \n this very moment.");

         frame.setVisible(false);

         panel.setVisible(false);      

         ChooseConcept();

      }

            

   }

   

   public class UserClickedNo implements ActionListener { 

      public void actionPerformed(ActionEvent event) {

         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

         JOptionPane.showMessageDialog(null, "Very well... \n I guess I'll just sleep then...");

         panel.setVisible(false);

         frame.dispose();

         

      }

            

   }

  

   public void ChooseConcept () {

      hpanel.setVisible(true);

      hpanel.addKeyListener(new UpKey());

      hpanel.setBackground(Color.BLACK);

      gh.setColor(Color.WHITE);

      gh.fillRect(0, 0, 25, 700);

      gh.fillRect(675, 0, 25, 700);

      gh.fillRect(0, 0, 700, 25);

      gh.fillRect(0, 675, 700, 25);

      

   }

      

  

   public class UpKey implements KeyListener {

      public void keyPressed(KeyEvent event) {

         

         if (history.hasNext()) {

            String line = history.nextLine();

            gh.drawString(line, 30, historyAxis);

            historyAxis = historyAxis + 20;

            if (history.hasNext() == false) {

            Doors();

           

         }

         }

         }

         

      public void keyReleased(KeyEvent event) {

      }

      public void keyTyped(KeyEvent event) {

      }

   }



   public class introkey implements KeyListener {

      public void keyPressed(KeyEvent event) {

         if (intro.hasNext()) {

            String line = intro.nextLine();

            g.drawString(line, 30, yAxis);

            yAxis = yAxis + 20;

         } 

         

         else {

            panel.sleep(500);

            frame.setVisible(true);

         }

      }

      

      public void keyReleased(KeyEvent event) {

      }

      public void keyTyped(KeyEvent event) {

      }

   }



   

   public void Doors () {

   

      try{

         BufferedImage door = ImageIO.read(new File("closeddoor1.jpg"));

         hpanel.sleep(500);

         gh.setColor(Color.BLACK);

         gh.fillRect(0, 0, 700, 700);

         gh.setColor(Color.WHITE);

         gh.fillRect(0, 0, 25, 700);

         gh.fillRect(675, 0, 25, 700);

         gh.fillRect(0, 0, 700, 25);

         gh.fillRect(0, 675, 700, 25);

         gh.drawImage(door, 27+50, 100, 100, 200, Color.BLACK, null);

         gh.drawImage(door, 233+50, 100, 100, 200, Color.BLACK, null);

         gh.drawImage(door, 466+50, 100, 100, 200, Color.BLACK, null);

         JButton button1 = new JButton();

         JButton button2 = new JButton();

         JButton button3 = new JButton();

         button1.setText("1");

         button2.setText("2");

         button3.setText("3");

         frame1.add(button1);

         frame1.add(button2);

         frame1.add(button3);

         frame1.setLayout(new FlowLayout());

         frame1.pack();

         frame1.setLocation(550, 600);

         button1.addMouseListener(new buttonevent1());

         button2.addMouseListener(new buttonevent2());

         button3.addMouseListener(new buttonevent3());

         frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);

         frame1.setVisible(true);

                 

      }

      

      catch(IOException e){

         System.out.println(e);

      }

   

   

   }



   public class buttonevent1 implements MouseListener {

      public void mousePressed(MouseEvent e) {

      door1();

      }

   

      public void mouseReleased(MouseEvent e) {

      }

   

      public void mouseEntered(MouseEvent e) {

         gh.setColor(Color.WHITE);

         gh.drawRect(75, 97, 100, 200);

      }

   

      public void mouseExited(MouseEvent e) {

         gh.setColor(Color.BLACK);

         gh.drawRect(75, 97, 100, 200);

      }

   

      public void mouseClicked(MouseEvent e) {

       

      }

   

      void saySomething(String eventDescription, MouseEvent e) {

      }

   }



   public class buttonevent2 implements MouseListener {

      public void mousePressed(MouseEvent e) {

      }

   

      public void mouseReleased(MouseEvent e) {

      }

   

      public void mouseEntered(MouseEvent e) {

         gh.setColor(Color.WHITE);

         gh.drawRect(280, 97, 100, 200);

      }

   

      public void mouseExited(MouseEvent e) {

         gh.setColor(Color.BLACK);

         gh.drawRect(280, 97, 100, 200);

      }

   

      public void mouseClicked(MouseEvent e) {

       

      }

   

      void saySomething(String eventDescription, MouseEvent e) {

      }

   }



   public class buttonevent3 implements MouseListener {

      public void mousePressed(MouseEvent e) {

      }

   

      public void mouseReleased(MouseEvent e) {

      }

   

      public void mouseEntered(MouseEvent e) {

         gh.setColor(Color.WHITE);

         gh.drawRect(515, 97, 100, 200);

      }

   

      public void mouseExited(MouseEvent e) {

         gh.setColor(Color.BLACK);

         gh.drawRect(515, 97, 100, 200);

      }

   

      public void mouseClicked(MouseEvent e) {

       

      }

   

      void saySomething(String eventDescription, MouseEvent e) {

      }

   }





   public void door1 () {

      try { 

      int yAxis = 50;

      JOptionPane.showMessageDialog(null, "Door 1 it is!");

      Scanner direction1 = new Scanner(new File("direction1.txt"));

      frame1.setVisible(false);

      gh.clearRect(25, 25, 650, 650);

      while (direction1.hasNext()) {

      String line = direction1.nextLine();

      gh.drawString(line, 27, yAxis);

      yAxis += 20;

      } 

      hpanel.sleep(1000);

      player.addPoint(50, 100+131);

      player.addPoint(100, 100+131);

      player.addPoint(100, 150+131);

      player.addPoint(50, 150+131);

      poly = player;

      gh.fillPolygon(player);

      hpanel.addKeyListener(new motion());

      gh.setColor(Color.WHITE);

      }

      catch(FileNotFoundException e){

      }

   

   }



public class motion implements KeyListener {

      public void keyPressed(KeyEvent event) {

      

      int key = event.getKeyCode();            

      if (player.intersects(25.9, 25.9, 650.9, 171.9) == false && hcount == 1) {

      gh.clearRect(25, 171, 650, 479+25);

      if (key == 38) {

      player.translate(0, -10);

      }

      if (key == 40) {

      player.translate(0, 10); 

      }

      if (key == 37) {

      player.translate(-10, 0);

      }

      if (key == 39) {

      player.translate(10, 0);

      }

      gh.setColor(Color.WHITE);

      gh.fillPolygon(player);         

                  } else {

     hcount = 2;

     gh.clearRect(25, 171, 650, 504); 

     gh.setColor(Color.WHITE);

     player.translate(0, 131);     

     gh.fillPolygon(player);     

     } 

     if (player.contains(299.9, 299.9, 49.9, 51.9)) {

     gh.clearRect(25, 25, 650, 650);

     gh.fillPolygon(player); 

     }

      if (player.intersects(674.9, 0, 674.9, 674.9)) {

      gh.clearRect(25, 25, 650, 650);

      player.translate(-600, 200);

      

      try {

      error = new Scanner(new File("error.txt"));

      for (int i = 50; i <= 360; i = i+ 20) {

     String line = error.nextLine();

     gh.drawString(line, 50, i);

     } 

      

      } catch (FileNotFoundException e) {

      }

      }

      } 

    

     public void keyReleased(KeyEvent event) {

      }

      public void keyTyped(KeyEvent event) {

      }

   }

 }















